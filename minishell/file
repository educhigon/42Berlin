/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: edugonza <edugonza@student.42berlin.de>    #+#  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025-05-06 16:51:18 by edugonza          #+#    #+#             */
/*   Updated: 2025-05-06 16:51:18 by edugonza         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MAIN_H
# define MAIN_H

# include "Libft_power/libft.h"

# include <sys/wait.h>
# include <sys/stat.h>
# include <readline/readline.h>
# include <readline/history.h>
# include <fcntl.h>
# include <errno.h>
# include <signal.h>
# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <string.h>

# define Y		"\033[1;33m"
# define G		"\033[1;32m"
# define C		"\033[1;36m"
# define RED		"\033[1;31m"
# define RST		"\033[0m"
# define PROMPT "?> "

/*--------------------------------- BUILTINS ---------------------------------*/
typedef struct s_token		t_token;
typedef struct t_astnode	t_astnode;

/*
int		input_type; // 1 = FILE (<) // 2 = HEREDOC (<<) // 3 = PIPE
int		input_fd; // if input comes from Pipe, fd != -1, else == -1
int		output_type; // 1 = FILE_TRUNC (>) // 2 = FILE_APP (>>) // 3 = PIPE
int		output_fd; // if output goes to Pipe, fd != -1, else == -1
*/
typedef struct s_exe_cmd
{
	int		status;
	char	*err_text;
	int		input_type;
	int		input_fd;
	int		output_type;
	int		output_fd;
}	t_exe_cmd;

typedef struct s_shell
{
	char		**envp;
	t_exe_cmd	current_cmd;
	t_token		*token_ll_or;
	t_astnode	*tree;
}	t_shell;

/*--------------------------------- TOKENS ---------------------------------*/

/*
	TOKEN_REDIRECT_IN, // < (2)
	TOKEN_REDIRECT_HEREDOC, // << (3)
	TOKEN_REDIRECT_OUT_TRUNC, // > (4)
	TOKEN_REDIRECT_OUT_APP, // >> (5)
*/

typedef enum e_token_type
{
	TOKEN_WORD,
	TOKEN_SPACE,
	TOKEN_REDIRECT_IN,
	TOKEN_REDIRECT_HEREDOC,
	TOKEN_REDIRECT_OUT_TRUNC,
	TOKEN_REDIRECT_OUT_APP,
	TOKEN_PIPE,
	TOKEN_D_QUOTE,
	TOKEN_S_QUOTE,
	TOKEN_SEQUENCE,
	TOKEN_EOF,
	TOKEN_ERROR
}	t_token_type;

struct s_token
{
	char			*content;
	t_token_type	type;
	int				fully_quoted;
	size_t			len;
	t_token			*next;
};

//to keep track of where we are in the token list
typedef struct s_parser
{
	t_token	*current;
}	t_parser;

/*----------------------------------- AST -----------------------------------*/

//AST node types
typedef enum e_astnode_type
{
	AST_COMMAND,
	AST_REDIRECT,
	AST_PIPELINE,
	AST_SEQUENCE,
	AST_ERROR
}	t_astnode_type;

/*
		} s_command;	//COMMAND node holds an array of strings (arguments)
		} s_binary;	//PIPELINE node holds two child nodes (left and right)
		} s_redirect;	//REDIRECT node holds a command and a file name.
			int					redirect_type; // 2(<),3(<<),4(>),5(>>),-1 NULL
*/
typedef struct t_astnode
{
	t_astnode_type	type;
	t_astnode		*parent;
	union
	{
		struct
		{
			char	**argv;
		} s_command;
		struct
		{
			struct t_astnode	*left;
			struct t_astnode	*right;
		} s_binary;
		struct
		{
			struct t_astnode	*command;
			char				**filename;
			int					redirect_type;
		} s_redirect;
	};
}	t_astnode;

typedef enum e_quote_type
{
	NO_QUOTE,
	SINGLE_QUOTE,
	DOUBLE_QUOTE
}	t_quote_type;

typedef struct s_expander
{
	t_quote_type	quote_type;
	char			*buf;
	int				buf_size;
	int				buf_i;
	t_token			**expanded_args_ll;
}	t_expander;

/*--------------------------------DECLARATIONS--------------------------------*/

/*::::::::::::::::::::::::::::::::::: MAIN :::::::::::::::::::::::::::::::::::*/

int				process_command(t_shell *evment, char *line);

// Signals
void			setup_signals(void);

// Utils
char			**copy_env(char **env);
void			add_history_entry(t_token *token_ll_or);

// are these functions needed in main?
void			print_header(void);
void			print_error_redir(t_shell *evment);
int				print_errors(t_shell *shell, char *cmd, char *error_text,
					int status);
void			print_tokens(t_token *token);
void			print_ast_tree(t_astnode *node, const char *prefix,
					int is_last);

/*:::::::::::::::::::::::::::::::::: TOKENS ::::::::::::::::::::::::::::::::::*/

// Tokenizer
t_token			*tokenize(char *line, t_shell *shell);
t_token			*get_token(char *start, char *end);
int				get_more_tokens(t_token *tokens, t_shell *shell);
int				invalid_token(t_token *tokens, t_shell *shell);

// Tokenizer Utils
int				ismeta(char c);
int				ft_isspace(char c);
int				isquoted(char c);
void			skip_whitespace(char **s);
void			free_token(t_token **token_ll);
void			go_to_end_of_quote(char **s, char quote);

// Get Token
void			get_greater_than_token(char **s, t_token **tokens_ll);
void			get_less_than_token(char **s, t_token **tokens_ll);
void			get_pipe_token(char **s, t_token **tokens_ll);
void			get_word_token(char **s, t_token **tokens_ll);
void			get_eof_token(char **s, t_token **tokens_ll);

// Get Token Type
t_token_type	get_token_type(char *line);

// Linked List Utils
void			del_content_token(void *content);
void			ft_lstadd_back_token(t_token **lst, t_token *new);
void			ft_lstclear_token(t_token **lst, void (*del)(void *));
void			ft_lstdelone_token(t_token *lst, void (*del)(void *));
int				ft_lstsize_token(t_token *lst);
t_token			*ft_lstnew_token(void *content);
t_token			*ft_token_last(t_token *lst);

/*:::::::::::::::::::::::::::::::::: PARSER ::::::::::::::::::::::::::::::::::*/

// AST
t_astnode		*parse_line(t_parser *parser, t_astnode *tree, t_token **tok);
t_astnode		*parse_redirect(t_parser *parser, t_astnode *tree,
					t_token **tok);
t_astnode		*create_command_node(void);
t_astnode		*create_binary_node(t_astnode_type type, t_astnode *left,
					t_astnode *right);
t_astnode		*create_redirect_node(t_astnode *command, char **filename,
					int redirect_type);
t_astnode		*parse_command(t_parser *parser, t_astnode *tree,
					t_token **tok);

// ASTree Utils
void			advance(t_parser *parser);
t_token			*next_tok(t_parser *parser);
void			build_word(t_token *tok, t_astnode *tree);
void			build_name(t_token *tok, t_astnode *tree);
void			free_tree(t_astnode *tree);
int				ft_strlen_char_char(char **str);

/*::::::::::::::::::::::::::::::::: EXPANDER :::::::::::::::::::::::::::::::::*/

// Tree Expandansion
t_astnode		*expand_tree(t_astnode *node, t_shell *envp);

// Expander
void			expand_command(t_astnode *node, t_shell *envp);
void			expand_redirect(t_astnode *node, t_shell *envp);

// Expand Argument
void			expand_argument(char *arg, t_token **expanded_args_ll,
					t_shell *shell);
int				single_quote_state(t_expander *expander, char *str,
					t_shell *shell);
int				double_quote_state(t_expander *expander, char *str,
					t_shell *shell);
int				no_quote_state(t_expander *expander, char *arg,
					t_shell *shell);

// Expand Var-Tilde
int				expand_variable(t_expander *expander, char *arg,
					t_shell *shell);
int				expand_tilde(t_expander *expander, char *arg, t_shell *shell);
int				expand_last_status(t_expander *expander, char *str,
					t_shell *shell);

// Expander Utils
char			*ft_getenv(char **envp, char *search_term);
char			**convert_ll_to_array(t_token *args_ll);
void			init_expander(t_expander *expander, char *arg,
					t_token**expanded_args_ll);
void			expand_buffer_by(t_expander *expander, int additional_len);

// Expander Mem Utils
void			cleanup_expander(t_expander *expander);

/*::::::::::::::::::::::::::::::::: EXECUTER :::::::::::::::::::::::::::::::::*/

// Main Executer
int				execute(t_astnode *tree, t_shell *shell);
int				execute_tree(t_astnode *tree, t_shell *shell);
char			*build_xble(t_astnode *tree, t_shell *shell);
int				exec_command(t_astnode *tree, t_shell *shell);
int				exec_pipe(t_astnode *tree, t_shell *shell);
int				exec_redirect(t_astnode *tree, t_shell *shell);

// Path Finder
char			*find_var(char **env, char *var_name);
char			*find_path(char *line, t_shell *shell);
char			*make_path(char *line, t_shell *shell);

// Redirection utils
void			get_text_from_file(t_astnode *tree, t_shell *shell);
void			get_heredoc(t_astnode *tree, t_shell *shell);
void			get_output_redirection(t_astnode *tree, t_shell *shell);

/*::::::::::::::::::::::::::::::::: BUILTINS :::::::::::::::::::::::::::::::::*/

int				is_builtin(t_astnode *node);
int				is_builtin_state(t_astnode *node);
int				choose_builtin(t_shell *shell, t_astnode *node);
int				ft_cd(t_shell *shell, char **args);
int				ft_pwd(void);
int				ft_echo(char **argv);
int				ft_env(t_shell *shell);
int				ft_exit(t_shell *shell, t_astnode *node);
int				ft_unset(t_shell *shell, char **args);
int				ft_export(t_shell *shell, char **args);
int				process_export_arg(t_shell *shell, char *arg);
int				find_env_var(char **env, char *name);
int				find_env_index(char **env, char *key);
char			*parse_var_key(char *arg);
void			replace_env_entry(char **env, int index, const char *arg);
int				add_env_entry(t_shell *shell, const char *arg);
void			print_sorted_env(char **env);

/*:::::::::::::::::::::::::::::::: DEBUGGING :::::::::::::::::::::::::::::::::*/

void			print_expanded_tree(t_astnode *root);

#endif
